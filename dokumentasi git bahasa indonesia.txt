git init => untuk menginisialisasi repo git
git add => menambahkan file ke staging area
git status => untuk mengetahui status repo
git commit => untuk melakukan commit pada file
git config => untuk melakukan config pada konfigurasi git
git branch => untuk membuat branch
git help => untuk melihat macam-macam perintah pada git

3 Area pada Repo Git
1. Working tree => folder/repo tempat melakukan pekerjaan
2. Staging area => area dimana setelah memberitahukan Git kalau telah melakukan perubahan
3. History => kalau sudah melakukan commit maka semua rekaman commitnya tersimpan disini
<Staging area & History> => tersimpan pada repo .git yang tersembunyi

Proses yang terjadi pada 3 area pada Repo Git
Working Tree ==git add==> Staging Area ==git commit==> History

Langkah-langkah git pada lokal
1. git init => untuk membuat/menginisialisasi folder saat ini menjadi repo
2. git status => git akan memunculkan file yang berubah/belum di add di masukkan ke Staging Area
    *git Untracked files => file-nya belum ditracking sama gitnya jadi file tersebut harus di masukkan ke staging area
    *git modified files => file-nya telah diubah
    *git rm --chached <file> => untuk menghapus file dari staging area
3. git commit => untuk melakukan commit pada filenya
    *sebelum melakukan git commit pertama-tama cek dulu apakah sudah ada user.name & user.email-nya sudah diisi atau belum, kalau belum isi user.name & user.email terlebih dahulu, perintah adalah:
    "git config --global user.email'nama@email.com'"
    "git config --global user.name 'Your Name'" 
    *git commit -am "Pesan" => digunakan jika filenya modified dan belum di masukkan ke staging area lalu ingin di commi. git log => digunakan untuk melihat hasil commit-commit yang telah dilakukan
    *git log -3 => artinya lihat 3 commit terakhir
    *git log -- "nama file" => lihat commit yang berhubungan dengan nama file yang dicari
5. git checkout => untuk melakukan perpindahan dari commit atau branch
    *git checkout <hash/id commit> -- <"nama file"> => mengembalikan file yang telah dihapus berdasarkan hash/commitnya tanpa mengubah file keseluruhan
6. git log --all --decorate --oneline --graph => digunakan untuk memvisualisasikan dalam bentuk garis seperti pada github
    *alias graph "git log --all --decorate --oneline --graph"
7. jenis-jenis merge
    1.Fast Forward => 
    2.Three-way Merge
