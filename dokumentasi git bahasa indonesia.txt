git init => untuk menginisialisasi repo git
git add => menambahkan file ke staging area
git status => untuk mengetahui status repo
git commit => untuk melakukan commit pada file
git config => untuk melakukan config pada konfigurasi git
git branch => untuk membuat branch
git help => untuk melihat macam-macam perintah pada git

3 Area pada Repo Git
1. Working tree => folder/repo tempat melakukan pekerjaan
2. Staging area => area dimana setelah memberitahukan Git kalau telah melakukan perubahan
3. History => kalau sudah melakukan commit maka semua rekaman commitnya tersimpan disini
<Staging area & History> => tersimpan pada repo .git yang tersembunyi

Proses yang terjadi pada 3 area pada Repo Git
Working Tree ==git add==> Staging Area ==git commit==> History

Langkah-langkah git pada lokal
1. git init => untuk membuat/menginisialisasi folder saat ini menjadi repo
2. git status => git akan memunculkan file yang berubah/belum di add di masukkan ke Staging Area
    *git Untracked files => file-nya belum ditracking sama gitnya jadi file tersebut harus di masukkan ke staging area
    *git modified files => file-nya telah diubah
    *git rm --chached <file> => untuk menghapus file dari staging area
3. git commit => untuk melakukan commit pada filenya
    *sebelum melakukan git commit pertama-tama cek dulu apakah sudah ada user.name & user.email-nya sudah diisi atau belum, kalau belum isi user.name & user.email terlebih dahulu, perintah adalah:
    "git config --global user.email'nama@email.com'"
    "git config --global user.name 'Your Name'" 
    *git commit -am "Pesan" => digunakan jika filenya modified dan belum di masukkan ke staging area lalu ingin di commi. git log => digunakan untuk melihat hasil commit-commit yang telah dilakukan
    *git log -3 => artinya lihat 3 commit terakhir
    *git log -- "nama file" => lihat commit yang berhubungan dengan nama file yang dicari
5. git checkout => untuk melakukan perpindahan dari commit atau branch
    *git checkout <hash/id commit> -- <"nama file"> => mengembalikan file yang telah dihapus berdasarkan hash/commitnya tanpa mengubah file keseluruhan
6. git log --all --decorate --oneline --graph => digunakan untuk memvisualisasikan dalam bentuk garis seperti pada github
    *alias graph "git log --all --decorate --oneline --graph"
7. jenis-jenis merge
    1.Fast Forward => commit yang ingin di merge itu langsung terhubung dengan branch master
    2.Three-way Merge => commit yang ingin di merge tidak terhubung dengan commit yang di tuju & melakukan commit baru
8. git branch --merged => digunakan untuk melihat branch yang sudah di merge
9. git branch -d nama branch => melakukan delete terhadap branch yang di tuju
10. git branch -D nama branch => melakukan delete terhadap branch yang belum melakukan merge

langkah-langkah untuk git remote:
+Mengcloning repository dari github ke local
1. git clone url => melakukan cloning terhadap repository dari github ke local (windows)
    Catatan: Jika kita melakukan cloning terhadap repository dari github maka secara otomatis akan di buatkan nama remote yaitu origin
2. git remote -v(verbose) => melihat remotenya secara lebih detail
3. git status => Mengecek status dari repo kita
    Catatan: Nanti akan muncul kalimat "Your branch is up to date with 'origin/master'." yang awalnya tidak ada jika kita cuman melakukan peritnah git di local saja.
4. git push => untuk mengirim perubahan yang di lakukan ke akun github kita.
5. git config --list => mengecek configurasi dari git local kita.

+Melakukan upload repository dari local ke github
1. git remote add Namanya bebas url => untuk membuat remote baru dari local ke github.
2. git push -u origin master => melakukan pengiriman file ke github menggunakan remote origin ke branch master di github.
    Catatan -u (Upstream) agar ketika melakukan upload file ke github tidak perlu lagi mengetikan nama remote dan nama branchnya

+Jika terjadi perubahan file pada akun github
1. git fetch => untuk melakukan pengecekan terhadap perubahan yang terjadi pada repository pada akun github kita.
2. git pull => untuk mengambil dulu file yang bermasalah tadi.

langkah-langkah untuk melakukan Web Hosting Gratis dengan GitHub Pages
+Menambahkan 1 repository ke web hosting gratis github pages
1. Buat repository baru pada https://github.com/new
2. Untuk nama repositorynya harus mengikuti nama akun githubnya
    Contoh : KevinDylanPrayudi.github.io
3. Tambahkan Description & Jangan tambahkan README

+Menambakan 1 repository baru & ingin menampilkan UI webnya
1. Buat repository baru pada https://github.com/new
2. Masukkan nama repositorynya (terserah karena sebelumnya sudah ada repository yang menggunakan usernamenya)
3. Masuk ke tab settings lalu scroll ke bawah sampai ketemu Github Pages
4. pada saat di source github pages pilih branch yang ingin di tampilkan & atur juga file yang mana akan ditampilkan

